package html

import "html/template"

// tppHeaderFooter is data that might be called upon when writing the HTML
// file's header or footer.
type tppHeaderFooter struct {
	Filenames   []string
	ProgName    string
	ProgVersion string
}

// tplHeader contains the HTML document header. It expects a tppHeaderFooter
// as data. It contains the document type and HTML <head> section, and leaves us
// in the <body> section.
var tplHeader = template.Must(template.New("Header").Parse(
	`<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>asn1-tool | {{.Filenames}}</title>

<!-- Bootstrap via CDN -->
<link rel="stylesheet" href="https://netdna.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"
integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7"
crossorigin="anonymous"/>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css"
integrity="sha384-fLW2N01lMqjakBkx3l/M9EahuwpSfeNvV63J5ezn3uZzapT0u7EYsXMjQV+0En5r"
crossorigin="anonymous">

<style>
.hexdump {
	font-size: large;
}
.hexdumpZero, .hexdumpFF {
	color: red;
}
.hexdumpNewline {
	color: blue;
}
.hexdumpPrintable {
}
.hexdumpUnprintable {
	color: #afafaf;
}
</style>
</head>
<body>
`))

// tplFooter closes the HTML <body> section and the HTML file as a whole. It
// expects a tppHeaderFooter as data.
var tplFooter = template.Must(template.New("Footer").Parse(
	`<hr class="footer"/>
<p class="footer">Generated by <code>{{.ProgName}} {{.ProgVersion}}</code>.</p>

<!-- JS for Bootstrap via CDN -->
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"
integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS"
crossorigin="anonymous"></script>

</body>
</html>
`))

type tppFileHeading struct {
	Fname string
	Size  int
	IsPem bool
}

var tplFileHeading = template.Must(template.New("FileHeading").Parse(
	`<h1>{{.Fname}}</h1>
<p>{{.Size}} byte {{if .IsPem}}PEM{{else}}DER{{end}} file</p>
`))

var tplPemBlock = template.Must(template.New("PemBlock").Parse(
	`<div class="pem">
<h2>PEM block</h2>

<p>Type: <code>{{.Type}}</code></p>
{{if .Headers}}<table>
<thead>
<tr><th>Header</th><th>Value</th></tr>
</thead>
<tbody>
{{range $hdr, $val := .Headers}}<tr><td>{{$hdr}}</td><td>{{$val}}</td></tr>
{{end}}</tbody>
</table>
{{end}}`))

// tppAsn1Heading holds details of an ASN.1 raw value.
type tppAsn1Heading struct {
	Class, Type       string
	Tag               int
	IsCompound        bool
	HdrSize, BodySize int
}

var tplAsn1Heading = template.Must(template.New("Asn1Heading").Parse(
	`<div class="well well-sm asn1">
<table class='table table-condensed'><tbody>
<tr><th scope='row'>Class</th><td>{{.Class}}</td></tr>
<tr><th scope='row'>Tag</th><td>{{.Tag}}</td></tr>
<tr><th scope='row'>Compound?</th><td>{{.IsCompound}}</td></tr>
<tr><th scope='row'>Header size</th><td>{{.HdrSize}}</td></tr>
<tr><th scope='row'>Value size</th><td>{{.BodySize}}</td></tr>
</tbody></table>
`))

// tppAsn1BadHeading holds details of a block that we couldn't parse as ASN.1
type tppAsn1BadHeading struct {
	Error  string
	Length int
}

var tplAsn1BadHeading = template.Must(template.New("Asn1BadHeading").Parse(
	`<div class="well well-sm asn1-bad">
<p>Unable to parse {{.Length}} bytes of ASN.1: <code>{{.Error}}</code></p>
`))
